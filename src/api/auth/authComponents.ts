/**
 * Generated by @openapi-codegen
 *
 * @version v0
 */
import * as reactQuery from "@tanstack/react-query";
import { useAuthContext, AuthContext } from "./authContext";
import type * as Fetcher from "./authFetcher";
import { authFetch } from "./authFetcher";
import type * as Schemas from "./authSchemas";

export type RegisterError = Fetcher.ErrorWrapper<undefined>;

export type RegisterVariables = {
  body?: Schemas.User;
} & AuthContext["fetcherOptions"];

export const fetchRegister = (
  variables: RegisterVariables,
  signal?: AbortSignal,
) =>
  authFetch<Record<string, any>, RegisterError, Schemas.User, {}, {}, {}>({
    url: "/auth/register",
    method: "post",
    ...variables,
    signal,
  });

export const useRegister = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Record<string, any>,
      RegisterError,
      RegisterVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useAuthContext();
  return reactQuery.useMutation<
    Record<string, any>,
    RegisterError,
    RegisterVariables
  >({
    mutationFn: (variables: RegisterVariables) =>
      fetchRegister({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type LoginError = Fetcher.ErrorWrapper<undefined>;

export type LoginVariables = {
  body?: Schemas.AuthRequest;
} & AuthContext["fetcherOptions"];

export const fetchLogin = (variables: LoginVariables, signal?: AbortSignal) =>
  authFetch<Record<string, any>, LoginError, Schemas.AuthRequest, {}, {}, {}>({
    url: "/auth/login",
    method: "post",
    ...variables,
    signal,
  });

export const useLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Record<string, any>,
      LoginError,
      LoginVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useAuthContext();
  return reactQuery.useMutation<
    Record<string, any>,
    LoginError,
    LoginVariables
  >({
    mutationFn: (variables: LoginVariables) =>
      fetchLogin({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type HomeError = Fetcher.ErrorWrapper<undefined>;

export type HomeVariables = AuthContext["fetcherOptions"];

export const fetchHome = (variables: HomeVariables, signal?: AbortSignal) =>
  authFetch<string, HomeError, undefined, {}, {}, {}>({
    url: "/",
    method: "get",
    ...variables,
    signal,
  });

export const useHome = <TData = string,>(
  variables: HomeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<string, HomeError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAuthContext(options);
  return reactQuery.useQuery<string, HomeError, TData>({
    queryKey: queryKeyFn({ path: "/", operationId: "home", variables }),
    queryFn: ({ signal }) =>
      fetchHome({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation = {
  path: "/";
  operationId: "home";
  variables: HomeVariables;
};
